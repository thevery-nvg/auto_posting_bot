import pandas as pd
from aiogram import Router, F, types, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from datetime import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder
from io import StringIO
from typing import Optional

from src.core.models import User, UserRole, Channel, Stat, Log, Post


class Buttons:
    # Main menu
    manage_channels_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"
    manage_channels_callback = "#manage_channels#"

    manage_posts_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏"
    manage_posts_callback = "#manage_posts#"

    manage_moderator_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"
    manage_moderator_callback = "#manage_moderator#"

    logs_text = "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    logs_callback = "#view_logs#"
    stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    stats_callback = "#view_stats#"
    # Manage channels
    add_channel_text = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
    add_channel_callback = "#add_channel#"
    remove_channel_text = "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª (–ø–æ ID)"
    remove_channel_callback = "#remove_channel#"
    list_types_text = "–¢–∏–ø—ã –∫–∞–Ω–∞–ª–æ–≤"
    list_types_callback = "#list_types#"
    list_channels_text = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"
    list_channels_callback = "#list_channels#"
    all_channels_text = "–í—Å–µ –∫–∞–Ω–∞–ª—ã"
    all_channels_callback = "#all_channels#"
    active_channels_text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"
    active_channels_callback = "#active_channels#"
    inactive_channels_text = "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"
    inactive_channels_callback = "#inactive_channels#"
    # Manage moderator
    add_moderator_text = "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
    add_moderator_callback = "#add_moderator#"
    remove_moderator_text = "–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–ø–æ ID)"
    remove_moderator_callback = "#remove_moderator#"
    list_moderators_text = "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"
    list_moderators_callback = "#list_moderators#"
    # Manage posts
    create_post_text = "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"
    create_post_callback = "#add_post#"
    remove_post_text = "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç (–ø–æ ID)"
    remove_post_callback = "#remove_post#"
    list_posts_text = "–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"
    list_posts_callback = "#list_posts#"
    skip_media_text = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    skip_media_callback = "#skip_media#"
    # Post menu
    edit_text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
    edit_callback = "#edit#"
    edit_title_text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    edit_title_callback = "#edit_title#"
    edit_time_text = "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    edit_time_callback = "#edit_time#"
    edit_add_media_text = "–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞"
    edit_add_media_callback = "#add_media#"
    edit_remove_media_text = "–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞"
    edit_remove_media_callback = "#remove_media#"
    edit_channel_text = "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª"
    edit_channel_callback = "#edit_channel#"

    forward_text = "–í–ø–µ—Ä–µ–¥"
    forward_callback = "#forward#"
    back_text = "–ù–∞–∑–∞–¥"
    back_callback = "#back#"
    goto_main_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    goto_main_callback = "#main_menu#"


goto_main_menu_btn = {
    "text": Buttons.goto_main_text,
    "callback_data": Buttons.goto_main_callback,
}


class Admin(StatesGroup):
    main = State()
    manage_channels = State()
    manage_channels_change_name = State()
    manage_channels_change_notification = State()

    add_channel_name = State()
    add_channel_id = State()
    add_notification_id = State()

    remove_channel = State()

    manage_posts = State()
    manage_posts_set_title = State()
    manage_posts_enter_text = State()
    manage_posts_media = State()
    manage_posts_set_time = State()
    manage_posts_switch_page = State()

    edit_post_text = State()
    edit_post_time = State()
    edit_post_media = State()
    edit_post_title = State()

    remove_post = State()


async def check_admin_access(
    user_id: int,
    db_session: AsyncSession,
    message: Optional[types.Message] = None,
    callback: Optional[types.CallbackQuery] = None,
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    is_admin = await is_user_admin(user_id, db_session)
    if not is_admin:
        error_msg = "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        if message:
            await message.answer(error_msg)
        elif callback:
            await callback.message.answer(error_msg)
    return is_admin


async def is_user_admin(user_id: int, db_session: AsyncSession) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    async with db_session.begin():
        user = await db_session.get(User, user_id)
        return user and user.role == UserRole.ADMIN


async def log_action(
    db_session: AsyncSession, user_id: int, action: str, details: str
) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    log = Log(
        user_id=user_id,
        action=action,
        details=details,
        timestamp=datetime.now(),
    )
    db_session.add(log)
    await db_session.commit()


def get_channel_details_text(channel):
    if not channel:
        return "No details"
    return (
        f"<b>üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ</b>\n\n"
        f"<b>üÜî ID:</b> <code>{channel.id}</code>\n"
        f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{channel.name}</code>\n\n"
        f"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"  ‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> {'<b><u>‚úÖ –ê–ö–¢–ò–í–ï–ù</u></b>' if channel.is_active else '‚ùå –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        f"  ‚Ä¢ <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b> {'<b><u>‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê</u></b>' if channel.moderation_enabled else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        f"  ‚Ä¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> <code>{channel.notification_chat_id or '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}</code>\n\n"
        f"<b>üìÖ –î–∞—Ç—ã:</b>\n"
        f"  ‚Ä¢ <b>–°–æ–∑–¥–∞–Ω:</b> <code>{channel.created_at}</code>\n"
        f"  ‚Ä¢ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> <code>{channel.updated_at}</code>\n"
    )


def get_channel_details_keyboard(channel):
    builder = InlineKeyboardBuilder()
    if not channel:
        builder.button(**goto_main_menu_btn)
        builder.adjust(1)
        return builder
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"change_name_{channel.id}")
    builder.button(
        text="–û—Ç–∫–ª—é—á–∏—Ç—å" if channel.is_active else "–í–∫–ª—é—á–∏—Ç—å",
        callback_data=f"switch_channel_status_{channel.id}",
    )
    builder.button(
        text=(
            "–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é"
            if channel.moderation_enabled
            else "–í–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é"
        ),
        callback_data=f"switch_moderation_status_{channel.id}",
    )
    builder.button(
        text="–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        callback_data=f"change_chat_notification_{channel.id}",
    )
    builder.button(**goto_main_menu_btn)
    builder.adjust(1)
    return builder


def get_post_details(post):
    return (
        f"üì¢ –ü–æ—Å—Ç ID:{post.id}:\n\n"
        f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.title}\n\n"
        f"–¢–µ–∫—Å—Ç:{post.text}\n\n"
        f"–ú–µ–¥–∏–∞ —Ç–∏–ø: {post.media_type}\n\n"
        f"–ú–µ–¥–∏–∞ —Ñ–∞–π–ª: {post.media_file_id}\n\n"
        f"–°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {post.created_by}\n\n"
        f"–ö–∞–Ω–∞–ª: {post.channel_id}\n\n"
        f"–°—Ç–∞—Ç—É—Å: {post.status}\n\n"
        f"–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {post.publish_time.strftime('%Y-%m-%d %H:%M')}"
    )


def get_post_details_keyboard(post):
    builder = InlineKeyboardBuilder()
    media_btn = (
        {
            "text": Buttons.edit_add_media_text,
            "callback_data": Buttons.edit_add_media_callback,
        }
        if not post.media_type
        else {
            "text": Buttons.edit_remove_media_text,
            "callback_data": Buttons.edit_remove_media_callback,
        }
    )
    builder.button(
        text=Buttons.edit_title_text, callback_data=Buttons.edit_title_callback
    )
    builder.button(text=Buttons.edit_text, callback_data=Buttons.edit_callback)
    builder.button(
        text=Buttons.edit_channel_text, callback_data=Buttons.edit_channel_callback
    )
    builder.button(
        text=Buttons.edit_time_text, callback_data=Buttons.edit_time_callback
    )
    builder.button(**media_btn)
    builder.button(**goto_main_menu_btn)
    builder.adjust(1)
    return builder


async def publish_post(bot: Bot, post: Post):
    try:
        if post.media_file_id and post.media_type:
            if post.media_type == "photo":
                await bot.send_photo(
                    chat_id=post.channel_id,
                    photo=post.media_file_id,
                    caption=post.text,
                    parse_mode="Markdown",
                )
            elif post.media_type == "video":
                await bot.send_video(
                    chat_id=post.channel_id,
                    video=post.media_file_id,
                    caption=post.text,
                    parse_mode="Markdown",
                )
            elif post.media_type == "document":
                await bot.send_document(
                    chat_id=post.channel_id,
                    document=post.media_file_id,
                    caption=post.text,
                    parse_mode="Markdown",
                )
        else:
            await bot.send_message(
                chat_id=post.channel_id, text=post.text, parse_mode="Markdown"
            )
    except Exception as e:
        print(e)
