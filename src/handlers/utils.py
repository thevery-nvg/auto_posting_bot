from datetime import datetime
from typing import Optional

from aiogram import types
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger
from sqlalchemy.ext.asyncio import AsyncSession

from src.core.crud import update_post, get_post_by_id, get_channel_by_id
from src.core.models import User, UserRole, Log, Post, PostStatus, Channel
from src.handlers.manage_posts.shedule import global_storage


class Buttons:
    # Main menu
    manage_channels_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"
    manage_channels_callback = "#manage_channels#"

    manage_posts_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏"
    manage_posts_callback = "#manage_posts#"

    manage_moderator_text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"
    manage_moderator_callback = "#manage_moderator#"

    logs_text = "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
    logs_callback = "#view_logs#"
    stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    stats_callback = "#view_stats#"
    # Manage channels
    add_channel_text = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
    add_channel_callback = "#add_channel#"
    remove_channel_text = "–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª (–ø–æ ID)"
    remove_channel_callback = "#remove_channel#"
    list_types_text = "–¢–∏–ø—ã –∫–∞–Ω–∞–ª–æ–≤"
    list_types_callback = "#list_types#"
    list_channels_text = "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"
    list_channels_callback = "#list_channels#"
    all_channels_text = "–í—Å–µ –∫–∞–Ω–∞–ª—ã"
    all_channels_callback = "#all_channels#"
    active_channels_text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"
    active_channels_callback = "#active_channels#"
    inactive_channels_text = "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"
    inactive_channels_callback = "#inactive_channels#"
    # Manage moderator
    add_moderator_text = "–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
    add_moderator_callback = "#add_moderator#"
    remove_moderator_text = "–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–ø–æ ID)"
    remove_moderator_callback = "#remove_moderator#"
    list_moderators_text = "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"
    list_moderators_callback = "#list_moderators#"
    # Manage posts
    create_post_text = "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"
    create_post_callback = "#add_post#"
    remove_post_text = "–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç (–ø–æ ID)"
    remove_post_callback = "#remove_post#"
    list_posts_text = "–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"
    list_posts_callback = "#list_posts#"
    skip_media_text = "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    skip_media_callback = "#skip_media#"
    list_posts_types_text = "–°–ø–∏—Å–∫–∏ –ø–æ—Å—Ç–æ–≤"
    list_posts_types_callback = "#list_posts_types#"
    cancel_post_text = "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç"
    cancel_post_callback = "#cancel_post#"

    pending_posts_text = "–û–∂–∏–¥–∞—é—â–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    pending_posts_callback = "#pending_posts#"
    published_posts_text = "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"
    published_posts_callback = "#published_posts#"
    cancelled_posts_text = "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"
    cancelled_posts_callback = "#cancelled_posts#"
    publish_now_text = "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å"
    publish_now_callback = "#publish_now#"
    yes_sure_callback = "#yes_publish_now#"
    no_god_no_callback = "#no_publish_now#"

    # Post menu
    edit_text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
    edit_callback = "#edit#"
    edit_title_text = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫"
    edit_title_callback = "#edit_title#"
    edit_time_text = "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
    edit_time_callback = "#edit_time#"
    edit_add_media_text = "–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞"
    edit_add_media_callback = "#add_media#"
    edit_remove_media_text = "–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞"
    edit_remove_media_callback = "#remove_media#"
    edit_channel_text = "–ò–∑–º–µ–Ω–∏—Ç—å –∫–∞–Ω–∞–ª"
    edit_channel_callback = "#edit_channel#"

    forward_text = "–í–ø–µ—Ä–µ–¥"
    forward_callback = "#forward#"
    back_text = "–ù–∞–∑–∞–¥"
    back_callback = "#back#"
    goto_main_text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    goto_main_callback = "#main_menu#"


goto_main_menu_btn = {
    "text": Buttons.goto_main_text,
    "callback_data": Buttons.goto_main_callback,
}


def go_to_main_menu_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(**goto_main_menu_btn)
    return builder.as_markup()


def yes_no_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="–î–∞", callback_data=Buttons.yes_sure_callback),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data=Buttons.no_god_no_callback),
    )
    return builder.as_markup()


class Admin(StatesGroup):
    main = State()
    manage_channels = State()
    manage_channels_change_name = State()
    manage_channels_change_notification = State()

    add_channel_name = State()
    add_channel_id = State()
    add_notification_id = State()
    change_moderation = State()
    end_add_channel = State()

    remove_channel = State()

    manage_posts = State()
    manage_posts_set_title = State()
    manage_posts_enter_text = State()
    manage_posts_media = State()
    manage_posts_set_time = State()
    manage_posts_switch_page = State()
    manage_posts_details = State()
    change_comment_chat_id= State()

    posts_list = State()
    edit_post_text = State()
    edit_post_time = State()
    edit_post_media = State()
    edit_post_title = State()

    remove_post = State()


async def check_admin_access(
    user_id: int,
    db_session: AsyncSession,
    message: Optional[types.Message] = None,
    callback: Optional[types.CallbackQuery] = None,
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    is_admin = await is_user_admin(user_id, db_session)
    if not is_admin:
        error_msg = "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        if message:
            await message.answer(error_msg)
        elif callback:
            await callback.message.answer(error_msg)
    return is_admin


async def is_user_admin(user_id: int, db_session: AsyncSession) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    async with db_session.begin():
        user = await db_session.get(User, user_id)
        return user and user.role == UserRole.ADMIN


async def log_action(
    db_session: AsyncSession, user_id: int, action: str, details: str
) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    log = Log(
        user_id=user_id,
        action=action,
        details=details,
        timestamp=datetime.now(),
    )
    db_session.add(log)
    await db_session.commit()


def get_channel_details_text(channel):
    if not channel:
        return "No details"
    return (
        f"<b>üì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ</b>\n\n"
        f"<b>üÜî ID:</b> <code>{channel.id}</code>\n"
        f"<b>üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ:</b> <code>{channel.name}</code>\n\n"
        f"<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"  ‚Ä¢ <b>–°—Ç–∞—Ç—É—Å:</b> {'<b><u>‚úÖ –ê–ö–¢–ò–í–ï–ù</u></b>' if channel.is_active else '‚ùå –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
        f"  ‚Ä¢ <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</b> {'<b><u>‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê</u></b>' if channel.moderation_enabled else '‚ùå –æ—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        f"  ‚Ä¢ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> <code>{channel.notification_chat_id or '‚ùå –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}</code>\n\n"
        f"<b>üìÖ –î–∞—Ç—ã:</b>\n"
        f"  ‚Ä¢ <b>–°–æ–∑–¥–∞–Ω:</b> <code>{channel.created_at}</code>\n"
        f"  ‚Ä¢ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> <code>{channel.updated_at}</code>\n"
    )


def get_channel_details_keyboard(channel):
    builder = InlineKeyboardBuilder()
    if not channel:
        builder.button(**goto_main_menu_btn)
        builder.adjust(1)
        return builder
    builder.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"change_name_{channel.id}")
    builder.button(
        text="–û—Ç–∫–ª—é—á–∏—Ç—å" if channel.is_active else "–í–∫–ª—é—á–∏—Ç—å",
        callback_data=f"switch_channel_status_{channel.id}",
    )
    builder.button(
        text=(
            "–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é"
            if channel.moderation_enabled
            else "–í–∫–ª—é—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é"
        ),
        callback_data=f"switch_moderation_status_{channel.id}",
    )
    builder.button(
        text="–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
        callback_data=f"change_comment_chat_id_{channel.id}",
    )
    builder.button(
        text="–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        callback_data=f"change_chat_notification_{channel.id}",
    )
    builder.button(**goto_main_menu_btn)
    builder.adjust(1)
    return builder


def get_post_details_text(post):
    if not post:
        return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    status_emoji = {
        "pending": "‚è≥",
        "scheduled": "üìÖ",
        "published": "‚úÖ",
        "failed": "‚ùå",
        "draft": "üìù",
    }

    status_text = {
        "pending": "–û–ñ–ò–î–ê–ï–¢",
        "scheduled": "–ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù",
        "published": "–û–ü–£–ë–õ–ò–ö–û–í–ê–ù",
        "failed": "–û–®–ò–ë–ö–ê",
        "draft": "–ß–ï–†–ù–û–í–ò–ö",
    }

    status = post.status.value if hasattr(post.status, "value") else post.status
    status_display = f"{status_emoji.get(status, '‚ùì')} <b>{status_text.get(status, status.upper())}</b>"

    media_type_emoji = {
        "photo": "üñº",
        "video": "üé¨",
        "document": "üìÑ",
        "audio": "üéµ",
        "animation": "üéû",
        None: "üìù",
    }

    media_type_display = (
        f"{media_type_emoji.get(post.media_type, 'üìé')} {post.media_type or '–¢–µ–∫—Å—Ç'}"
    )

    publish_time = (
        post.publish_time.strftime("%d.%m.%Y –≤ %H:%M")
        if post.publish_time
        else "‚è∞ –ù–µ —É–∫–∞–∑–∞–Ω–æ"
    )
    created_at = (
        post.created_at.strftime("%d.%m.%Y –≤ %H:%M") if post.created_at else "‚Äî"
    )

    published_at = (
        post.published.strftime("%d.%m.%Y –≤ %H:%M") if post.published else "‚Äî"
    )
    text_preview = (
        post.text[:100] + "..."
        if post.text and len(post.text) > 100
        else post.text or "‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞"
    )
    title_preview = (
        post.title[:50] + "..."
        if post.title and len(post.title) > 50
        else post.title or "‚ùå –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    )

    return (
        f"<b>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–µ</b>\n\n"
        f"<b>üÜî ID:</b> <code>{post.id}</code>\n"
        f"<b>üè∑ –ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> <code>{title_preview}</code>\n\n"
        f"<b>üìÑ –¢–µ–∫—Å—Ç:</b>\n<code>{text_preview}</code>\n\n"
        f"<b>üìä –î–µ—Ç–∞–ª–∏:</b>\n"
        f"  ‚Ä¢ <b>–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:</b> {media_type_display}\n"
        f"  ‚Ä¢ <b>–ú–µ–¥–∏–∞ —Ñ–∞–π–ª:</b> <code>{post.media_file_id or '‚ùå –ù–µ—Ç –º–µ–¥–∏–∞'}</code>\n"
        f"  ‚Ä¢ <b>–ö–∞–Ω–∞–ª:</b> <code>{post.channel_id}</code>\n\n"
        f"<b>üë§ –ê–≤—Ç–æ—Ä:</b> <code>{post.created_by}</code>\n"
        f"<b>üìà –°—Ç–∞—Ç—É—Å:</b> {status_display}\n\n"
        f"<b>‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> <code>{publish_time}</code>\n"
        f"<b>üìÖ –°–æ–∑–¥–∞–Ω:</b> <code>{created_at}</code>\n"
        f"<b>üîÑ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:</b> <code>{published_at}</code>\n"
    )


def get_post_details_keyboard(post):
    builder = InlineKeyboardBuilder()
    media_btn = (
        {
            "text": Buttons.edit_add_media_text,
            "callback_data": Buttons.edit_add_media_callback,
        }
        if not post.media_type
        else {
            "text": Buttons.edit_remove_media_text,
            "callback_data": Buttons.edit_remove_media_callback,
        }
    )
    builder.button(
        text=Buttons.edit_title_text, callback_data=Buttons.edit_title_callback
    )
    builder.button(text=Buttons.edit_text, callback_data=Buttons.edit_callback)
    builder.button(
        text=Buttons.edit_channel_text, callback_data=Buttons.edit_channel_callback
    )
    builder.button(
        text=Buttons.edit_time_text, callback_data=Buttons.edit_time_callback
    )
    if post.status != PostStatus.CANCELLED:
        builder.button(
            text=Buttons.cancel_post_text, callback_data=Buttons.cancel_post_callback
        )
    if post.status != PostStatus.PUBLISHED:
        builder.button(
            text=Buttons.publish_now_text, callback_data=Buttons.publish_now_callback
        )
    builder.button(**media_btn)
    builder.button(**goto_main_menu_btn)
    builder.adjust(1)
    return builder


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_post_preview_text(post):
    if not post:
        return "‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

    status_emoji = {
        "pending": "‚è≥",
        "scheduled": "üìÖ",
        "published": "‚úÖ",
        "failed": "‚ùå",
        "draft": "üìù",
    }

    status = post.status.value if hasattr(post.status, "value") else post.status
    title_preview = (
        post.title[:30] + "..."
        if post.title and len(post.title) > 30
        else post.title or "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
    )

    publish_time = (
        post.publish_time.strftime("%d.%m %H:%M") if post.publish_time else "‚Äî"
    )

    return (
        f"{status_emoji.get(status, '‚ùì')} <b>–ü–æ—Å—Ç #{post.id}</b>\n"
        f"<code>{title_preview}</code>\n"
        f"üìÖ {publish_time} | üè∑ {status}\n"
        f"üì∫ –ö–∞–Ω–∞–ª: <code>{post.channel_id}</code>"
    )


async def publish_post(post_id: int) -> None:
    bot = global_storage["bot"]
    db_manager = global_storage["db_manager"]
    session_generator = db_manager.get_async_session()
    async for session in session_generator:
        db_session = session
        post: Post = await get_post_by_id(db_session, post_id)
        channel: Channel = await get_channel_by_id(db_session, post.channel_id)
        data = {
            k: v
            for k, v in {
                "chat_id": post.channel_id,
                "photo": post.media_file_id if post.media_type == "photo" else None,
                "video": post.media_file_id if post.media_type == "video" else None,
                "document": post.media_file_id if post.media_type == "document" else None,
                "caption": post.text,
                "parse_mode": "Markdown",
            }.items()
            if v
        }
        msg: types.Message = await bot.send_document(**data)
        logger.info(f"Post ID:{post.id} is published in channel {channel.name}[{post.channel_id}]")
        if channel.notification_chat_id:
            await bot.send_message(
                chat_id=channel.notification_chat_id,
                text=f"–ü–æ—Å—Ç <b>{post.title}</b> –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ <b>{channel.name}[{post.channel_id}]</b>",
                parse_mode="HTML",
            )
        post.message_id = msg.message_id
        post.published = datetime.now()
        post.status = PostStatus.PUBLISHED
        await update_post(db_session, post)
